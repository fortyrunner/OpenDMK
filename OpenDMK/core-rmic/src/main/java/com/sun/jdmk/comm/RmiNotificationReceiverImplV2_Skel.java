/*
 * @(#)RmiNotificationReceiverImplV2_Skel.java	1.5
 *
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the
 * LEGAL_NOTICES folder that accompanied this code. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 *
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 *
 *       "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 *
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 *
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 *
 *
 */
// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.sun.jdmk.comm;

public final class RmiNotificationReceiverImplV2_Skel
  implements java.rmi.server.Skeleton {
  private static final java.rmi.server.Operation[] operations = {
    new java.rmi.server.Operation("java.lang.Object remoteRequest(int, java.lang.Object[])[]")
  };

  private static final long interfaceHash = 8523573353537790858L;

  public java.rmi.server.Operation[] getOperations() {
    return operations.clone();
  }

  public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
    throws java.lang.Exception {
    if (opnum < 0) {
      if (hash == -5203888509662801705L) {
        opnum = 0;
      } else {
        throw new java.rmi.UnmarshalException("invalid method hash");
      }
    } else {
      if (hash != interfaceHash) {
        throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
      }
    }

    com.sun.jdmk.comm.RmiNotificationReceiverImplV2 server = (com.sun.jdmk.comm.RmiNotificationReceiverImplV2) obj;
    switch (opnum) {
      case 0: // remoteRequest(int, Object[])
      {
        int $param_int_1;
        java.lang.Object[] $param_arrayOf_Object_2;
        try {
          java.io.ObjectInput in = call.getInputStream();
          $param_int_1 = in.readInt();
          $param_arrayOf_Object_2 = (java.lang.Object[]) in.readObject();
        } catch (java.io.IOException e) {
          throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
        } catch (java.lang.ClassNotFoundException e) {
          throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
        } finally {
          call.releaseInputStream();
        }
        java.lang.Object[] $result = server.remoteRequest($param_int_1, $param_arrayOf_Object_2);
        try {
          java.io.ObjectOutput out = call.getResultStream(true);
          out.writeObject($result);
        } catch (java.io.IOException e) {
          throw new java.rmi.MarshalException("error marshalling return", e);
        }
        break;
      }

      default:
        throw new java.rmi.UnmarshalException("invalid method number");
    }
  }
}
